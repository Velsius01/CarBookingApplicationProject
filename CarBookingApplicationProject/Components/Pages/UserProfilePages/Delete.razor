@page "/userprofiles/delete"
@using Microsoft.EntityFrameworkCore
@using CarBookingApplicationProject.Domain
@inject IDbContextFactory<CarBookingApplicationProject.Data.CarBookingApplicationProjectContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>UserProfile</h2>
    <hr />
    @if (userprofile is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DisplayName</dt>
            <dd class="col-sm-10">@userprofile.DisplayName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@userprofile.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@userprofile.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateOfBirth</dt>
            <dd class="col-sm-10">@userprofile.DateOfBirth</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Gender</dt>
            <dd class="col-sm-10">@userprofile.Gender</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@userprofile.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CarLicense</dt>
            <dd class="col-sm-10">@userprofile.CarLicense</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AcceptanceRate</dt>
            <dd class="col-sm-10">@userprofile.AcceptanceRate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DrivingExperience</dt>
            <dd class="col-sm-10">@userprofile.DrivingExperience</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">FrequentLocations</dt>
            <dd class="col-sm-10">@userprofile.FrequentLocations</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PreferredPickupTime</dt>
            <dd class="col-sm-10">@userprofile.PreferredPickupTime</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsDriver</dt>
            <dd class="col-sm-10">@userprofile.IsDriver</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsPassenger</dt>
            <dd class="col-sm-10">@userprofile.IsPassenger</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@userprofile.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@userprofile.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@userprofile.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@userprofile.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="userprofile" OnValidSubmit="DeleteUserProfile" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(userprofile is null)">Delete</button> |
            <a href="/userprofiles">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private UserProfile? userprofile;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        userprofile = await context.UserProfile.FirstOrDefaultAsync(m => m.Id == Id);

        if (userprofile is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteUserProfile()
    {
        using var context = DbFactory.CreateDbContext();
        context.UserProfile.Remove(userprofile!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/userprofiles");
    }
}
